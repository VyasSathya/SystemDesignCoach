## **Project Purpose**

The System Design Bot serves as a comprehensive learning and practice platform with three distinct but integrated roles:

1. **Coach**: Guides users through system design concepts, adapting explanations based on the user's knowledge level and providing targeted guidance without directly editing their work.
2. **Interviewer**: Simulates realistic big tech interviews, challenging users with probing questions and maintaining the genuine interview experience.
3. **Grader**: Evaluates user solutions objectively, providing structured feedback and communicating with the Coach to address knowledge gaps.

## **Core Features**

### **1. Multi-Agent System**

- The platform employs three specialized AI agents that work in concert:
    - **Coach Agent** (e.g., "Coach Calvin"): Provides adaptive guidance, explanations, and conceptual support without directly editing user work.
    - **Interviewer Agent** (e.g., "Interviewer Ilya"): Conducts realistic interview simulations with appropriate challenging questions and minimal hints.
    - **Grader Agent**: Works behind the scenes to evaluate solutions based on structured criteria and communicate insights to the Coach.
- Each agent maintains a distinct persona with consistent communication style and purpose.
- The Coach and Grader maintain a feedback loop to ensure teaching focuses on areas needing improvement.

### **2. Structured Learning Workbook**

- The right side of the interface serves as the user's workbook with sections for all essential system design components:
    - Requirements clarification (functional and non-functional)
    - System interface definition (APIs)
    - Capacity estimation and constraints
    - Database schema design
    - High-level system architecture
    - Detailed component design
    - Bottleneck identification and resolution
    - Additional considerations (caching, sharding, etc.)
- The workbook is entirely user-editable with no direct AI modifications.
- Structured templates guide users toward complete answers while maintaining creative freedom.

### **3. Interactive Diagram Editors**

- **System Diagram Editor**
    - Uses **React Flow** for interactive visual editing
    - Converts to **Mermaid.js** for AI understanding and analysis
    - Supports **creating, editing, deleting, and connecting elements**
    - Provides **renaming functionality** for elements
    - Maintains user control with no direct AI modifications
- **Sequence Diagram Editor**
    - Integrated using **Mermaid.js**
    - Implements **structural constraints** to ensure clarity and correctness
    - Enables visualization of component interactions and workflows
- **Database Schema Editor**
    - Supports multiple **pages** for different database structures
    - Each page represents a **single database table/collection**
    - Includes fields for names, types, constraints, and relationships
    - Provides complete CRUD operations for schema elements
- **API Function Editor**
    - Allows definition of endpoints, request types, and response formats
    - Supports multiple pages for different service APIs
    - Ensures structured API definitions with clear inputs/outputs
- **Multiple Pages for Each Diagram Type**
    - Each editor supports up to **5 pages per section**
    - Enables complex system representation across multiple diagrams
    - Navigation through tabs or dropdowns for a seamless experience

### **4. AI-Aware Diagram Analysis**

- AI agents understand diagram contents through Mermaid.js integration
- Agents can reference specific diagram elements in their feedback
- The system maintains awareness of user diagram changes for contextual coaching
- AI provides feedback on diagrams via chat, not direct diagram edits

### **5. Adaptive Coaching System**

- Coach adapts explanation depth based on:
    - User's demonstrated knowledge level
    - Grader's feedback on strengths and weaknesses
    - Topic-specific proficiency (e.g., scaling, databases, API design)
- Provides concept explanations with real-world examples
- References user's specific workbook content when offering guidance
- Suggests improvements through descriptive guidance rather than direct edits
- Focuses extra attention on areas identified as weaknesses by the Grader

### **6. Realistic Interview Simulation**

- Presents authentic system design problems modeled after FAANG interviews
- Follows a structured interview process:
    - Problem presentation with appropriate scope
    - Probing questions about design decisions
    - Realistic time constraints and expectations
    - Professional yet challenging demeanor
- Avoids excessive hints while maintaining conversational flow
- Provides contextual redirection if user gets off-track
- Concludes with comprehensive evaluation and scoring

### **7. Structured Evaluation Framework**

- Implements objective scoring across key dimensions:
    - Requirements analysis (15 points)
    - System interface design (10 points)
    - Capacity estimation (10 points)
    - Data modeling (15 points)
    - High-level architecture (15 points)
    - Detailed component design (15 points)
    - Scalability & performance (10 points)
    - Reliability & fault tolerance (10 points)
- Provides both numerical scores and qualitative feedback
- Identifies specific strengths and areas for improvement
- Maintains consistent evaluation standards while accounting for problem-specific priorities
- Communicates evaluation insights to the Coach for targeted guidance

### **8. User Progress Tracking**

- Tracks user progress across multiple design challenges
- Identifies persistent strengths and weaknesses
- Records improvement over time in specific skill areas
- Enables Coach to reference past performance in guidance

---

## **Interaction Flow**

1. **User Selects Mode**
    - Learning Mode (Coach)
    - Interview Mode (Interviewer)
2. **In Learning Mode:**
    - Coach presents concepts with examples
    - User completes workbook sections
    - Coach references user work without editing
    - Grader evaluates work privately and informs Coach
    - Coach adjusts guidance based on evaluation
3. **In Interview Mode:**
    - Interviewer presents problem statement
    - User fills workbook sections under time constraints
    - Interviewer asks probing questions
    - User refines solution based on questions
    - Grader evaluates final solution
    - Interviewer provides final feedback and score

---

## **Challenges & Considerations**

- **Knowledge Level Detection**
    - Accurately gauging user's existing system design knowledge
    - Appropriate adjustment of explanation depth and terminology
    - Avoiding over-explaining to advanced users
- **Effective Guidance Without Direct Editing**
    - Providing clear guidance on diagram improvements without direct edits
    - Ensuring feedback is specific enough to be actionable
    - Referencing workbook content effectively in conversation
- **Subjective Evaluation Standardization**
    - Maintaining consistent evaluation standards
    - Balancing objective criteria with inherently subjective design decisions
    - Recognizing valid alternative approaches
- **Agent Coordination**
    - Seamless communication between Grader and Coach
    - Preventing contradictory feedback from different agents
    - Maintaining distinct personas while working cohesively

---

## **Next Steps**

1. **Implement Triple-Agent System**
    - Develop Coach, Interviewer, and Grader prompt frameworks
    - Establish communication protocols between agents
    - Create evaluation criteria for Grader
2. **Develop Structured Workbook**
    - Create templates for each system design section
    - Implement user-editable fields and diagrams
    - Ensure AI can reference but not modify workbook content
3. **Build Knowledge Library**
    - Compile system design patterns, examples, and best practices
    - Create graduated difficulty levels for learning progression
    - Develop problem statements modeled after real interviews
4. **Enhance User Experience**
    - Implement smooth navigation between workbook sections
    - Create clear mode selection between Coach and Interviewer
    - Ensure responsive feedback based on user interactions

---

## **Final Goal**

To create a comprehensive system design learning and interview preparation platform that combines:

1. **Adaptive Learning** - Personalized guidance that evolves with user knowledge
2. **Structured Practice** - Complete workbook approach covering all system design components
3. **Realistic Simulation** - Authentic interview experience with professional evaluation
4. **Objective Feedback** - Clear, actionable insights for improvement
5. **Knowledge Progression** - Graduated learning from fundamentals to advanced designs

This tool will empower users to master system design concepts, practice in a structured environment, and prepare effectively for technical interviews at top technology companies, all while maintaining full user control over their design work.